## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix()) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
ccc <- makeCacheMatrix(1:20
)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
invisible(m)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
m
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
m
}
## Write a short comment describing this function
##cacheSolve <- function(x) {
##        ## Return a matrix that is the inverse of 'x'
##    m <- x$getinverse()
##    if(!is.null(m)) {
##        message("getting cached data")
##        return(m)
##    }
##    mdata <- x$get()
##    m <- solve(mdata)
##    x$setinverse(m)
##    m
##}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
print('123')
}
## Write a short comment describing this function
##cacheSolve <- function(x) {
##        ## Return a matrix that is the inverse of 'x'
##    m <- x$getinverse()
##    if(!is.null(m)) {
##        message("getting cached data")
##        return(m)
##    }
##    mdata <- x$get()
##    m <- solve(mdata)
##    x$setinverse(m)
##    m
##}
ccc <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
ccc$get()
ccc <- matrix(c(1,2,3,4), nrow=2, ncol=2)
ccc
ccc <- makeVector(1:4)
ccc$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
hoh <<- 123
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
##    list(set = set, get = get,
##         setmean = setmean,
##         getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ccc <- makeVector(1:4)
ccc$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
hoh <<- 123
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
##    list(set = set, get = get,
##         setmean = setmean,
##         getmean = getmean)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ccc <- makeVector(1:4)
ccc$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
hoh <<- 123
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ccc <- makeVector(1:4)
ccc$get()
ddd <- makeVector(1:4)
ddd$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
ddd <- makeCacheMatrix(matrixc(1,2,3,4))
ddd$get()
ddd <- makeCacheMatrix(matrix(1,2,3,4))
ddd$get()
ddd <- makeCacheMatrix(matrix(c(1,2,3,4))
)
ddd$get()
ddd <- makeCacheMatrix(matrix(c(1,2,3,4),nrow=2))
ddd$get()
rm(abc)
rm(ddd)
rm(ccc)
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
eee
eee
?list
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
m
##    list(set = set, get = get,
##         setinverse = setinverse,
#3         getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
eee$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
print('123')
##    list(set = set, get = get,
##         setinverse = setinverse,
#3         getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
eee$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
getx <- function() x
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
print('123')
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
eee
eee$get()
eee$getx()
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
eee <- makeCacheMatrix(matrix(c(1,2,3,5),nrow=2))
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$get()
?message
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(mat) m <<- mat
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("matrix inverse")
message("getting cached data")
return(m)
}
mdata <- x$get()
m <- solve(mdata)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
